/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.AmazonRole.SystemAdminRole;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import system.Enterprise.Enterprise;
import system.Location.Location;
import system.Location.SubLocation;
import system.NetWork.NetWork;
import system.NetWork.NetWorkDirectory;

/**
 *
 * @author Administrator
 */
public class ManageNetWorkJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageNetWorkJPanel
     */
    JPanel container;
//    System system;
    NetWorkDirectory netWorkDirectory;
//private int newNodeSuffix=1;
//private static String ADD_COMMAND = "add";
//private static String REMOVE_COMMAND = "remove";
//private static String CLEAR_COMMAND = "clear";

    public ManageNetWorkJPanel(JPanel container, NetWorkDirectory netWorkDirectory) {
        initComponents();
        this.container = container;
        this.netWorkDirectory = netWorkDirectory;
//        popdata();
        populateTree();
//         JButton addButton = new JButton("Add");
//    addButton.setActionCommand(ADD_COMMAND);
//    addButton.addActionListener(this);
//
//    JButton removeButton = new JButton("Remove");
//    removeButton.setActionCommand(REMOVE_COMMAND);
//    removeButton.addActionListener(this);
//
//    JButton clearButton = new JButton("Clear");
//    clearButton.setActionCommand(CLEAR_COMMAND);
//    clearButton.addActionListener(this);
    }

//    private void popdata() {
//        DefaultTableModel model = (DefaultTableModel) netWorkJTable.getModel();
//        model.setNumRows(0);
//        for (NetWork n : netWorkDirectory.getNetWorkList()) {
//            Object[] row = new Object[1];
//            row[0] = n;
////            row[1] = n.getLocation().getState();
////            row[2]=n.getLocation().getCity();
//
//            model.addRow(row);
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        creStateJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        treePane = new javax.swing.JScrollPane();
        locationJTree = new javax.swing.JTree();
        refreshTreeJButton = new javax.swing.JButton();
        lblSelectNodeJLabel = new javax.swing.JLabel();
        creCountryJButton = new javax.swing.JButton();
        creCityJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Create NetWork");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, -1, -1));

        creStateJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        creStateJButton.setText("Manage State");
        creStateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creStateJButtonActionPerformed(evt);
            }
        });
        add(creStateJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, -1, -1));

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 331, -1, -1));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Global");
        locationJTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        locationJTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                locationJTreeValueChanged(evt);
            }
        });
        treePane.setViewportView(locationJTree);

        add(treePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 21, 164, 333));

        refreshTreeJButton.setText("Refresh Tree");
        refreshTreeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTreeJButtonActionPerformed(evt);
            }
        });
        add(refreshTreeJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 360, -1, -1));
        add(lblSelectNodeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 11, 260, 30));

        creCountryJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        creCountryJButton.setText("Manage Country");
        creCountryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creCountryJButtonActionPerformed(evt);
            }
        });
        add(creCountryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 110, -1, -1));

        creCityJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        creCityJButton.setText("Manage City");
        creCityJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creCityJButtonActionPerformed(evt);
            }
        });
        add(creCityJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, 130, -1));
    }// </editor-fold>//GEN-END:initComponents
//   private void checkValidName(){
//     if (countryJTextField.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Invalid name!");
//        } else {
//     
//     }
//   }
    private void creStateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creStateJButtonActionPerformed
        // TODO add your handling code here:
// DefaultMutableTreeNode node =(DefaultMutableTreeNode)locationJTree.getLastSelectedPathComponent();
//      NetWork n = (NetWork)locationJTree.getLastSelectedPathComponent();         
 CreateStateJPanel createStateJPanel = new CreateStateJPanel(container,netWorkDirectory);
        CardLayout layout = (CardLayout)container.getLayout();
        container.add("CreateStateJPanel",createStateJPanel);
        layout.next(container);
//        if (countryJTextField.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Invalid name!");
//        } else {
//            NetWork netWork = netWorkDirectory.creNetWork();
//           Location l= netWork.getLocationDirectory().creLocation();
//            l.setCountry(countryJTextField.getText());
//           
//            netWork.setLocation(l);
//            popdata();
//        }
    }//GEN-LAST:event_creStateJButtonActionPerformed
 private void populateTree(){
    DefaultTreeModel model= (DefaultTreeModel)locationJTree.getModel();
    DefaultMutableTreeNode root  =(DefaultMutableTreeNode)model.getRoot();
    root.removeAllChildren();
    DefaultMutableTreeNode networkNode;
    DefaultMutableTreeNode locationNode;
    DefaultMutableTreeNode sbLNode;
     DefaultMutableTreeNode entNode;
    ArrayList<NetWork> networkList = netWorkDirectory.getNetWorkList();
//    for(int i = 0; i<networkList.size(); i++){
//    Network net = networkList.get(i);
//   networkNode = new DefaultMutableTreeNode(net.getName());
//   root.insert(networkNode, i);
//    }
    for(NetWork net:networkList){
      
//  boolean check=netWorkDirectory.checkNetWorkName(net.getName());
//  if(check== true){
//  return;
//  }  
  networkNode = new DefaultMutableTreeNode(net.getName());
    root.insert(networkNode, 0);
    
    ArrayList<Location>locationList= net.getLocationDirectory().getLocationList();
    for(Location l: locationList){
   
//       boolean checkL=net.getLocationDirectory().checkLocationName(l.getName());
//  if(checkL== true){
//  return;
//  } 
  locationNode = new DefaultMutableTreeNode(l.getName());
    networkNode.insert(locationNode, 0);
  
    ArrayList<SubLocation>sbList= l.getSblocation();
    for(int j=0; j<sbList.size(); j++){
        SubLocation sbL = sbList.get(j);
    
//        boolean checkSubL=l.checkSubLocationName(sbL.getName());
//  if(checkSubL== true){
//  return;
//  }
   sbLNode = new DefaultMutableTreeNode(sbL.getName());
     locationNode.insert(sbLNode, j);
     
     
//        ArrayList<Enterprise> entList = net.getEnterpriseDirectory().getEnterpriseList();
//     for(Enterprise e: entList){
//     if(e.getLocation().getCity().equals(sbL.getName())){
//          entNode = new DefaultMutableTreeNode();
//     sbLNode.insert(entNode, 0);
//     }
//    }
    
    }
    }}
   
//root = new DefaultMutableTreeNode("Global");
// root.removeAllChildren();
//model = new DefaultTreeModel(root);
//model.addTreeModelListener(new MyTreeModelListener() { });
//
//locationJTree = new JTree(model);
//locationJTree.setEditable(true);
//locationJTree.getSelectionModel().setSelectionMode
//        (TreeSelectionModel.SINGLE_TREE_SELECTION);
//locationJTree.setShowsRootHandles(true);
    model.reload();
    

 }
// class MyTreeModelListener implements TreeModelListener {
//    public void treeNodesChanged(TreeModelEvent e) {
//        DefaultMutableTreeNode node;
//        node = (DefaultMutableTreeNode)
//                 (e.getTreePath().getLastPathComponent());
//
//        /*
//         * If the event lists children, then the changed
//         * node is the child of the node we have already
//         * gotten.  Otherwise, the changed node and the
//         * specified node are the same.
//         */
//        try {
//            int index = e.getChildIndices()[0];
//            node = (DefaultMutableTreeNode)
//                   (node.getChildAt(index));
//        } catch (NullPointerException exc) {}
//
//        System.out.println("The user has finished editing the node.");
//        System.out.println("New value: " + node.getUserObject());
//    }
//    public void treeNodesInserted(TreeModelEvent e) {
//    }
//    public void treeNodesRemoved(TreeModelEvent e) {
//    }
//    public void treeStructureChanged(TreeModelEvent e) {
//    }
//}
//   treePane.addObject("New Node " + newNodeSuffix++);
//...
//public DefaultMutableTreeNode addObject(Object child) {
//    DefaultMutableTreeNode parentNode = null;
//   DefaultTreeModel model;
////     = (DefaultTreeModel)locationJTree.getModel();
//    DefaultMutableTreeNode root;
//    root = new DefaultMutableTreeNode("Global");
// root.removeAllChildren();
//model = new DefaultTreeModel(root);
//locationJTree = new JTree(model);
//    TreePath parentPath =locationJTree.getSelectionPath();
//
//    if (parentPath == null) {
//        //There is no selection. Default to the root node.
//        parentNode = root;
//    } else {
//        parentNode = (DefaultMutableTreeNode)
//                     (parentPath.getLastPathComponent());
//    }
//
//    return addObject(parentNode, child, true);
//}
////...
//public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
//                                        Object child,
//                                        boolean shouldBeVisible) {
//    DefaultMutableTreeNode childNode =
//            new DefaultMutableTreeNode(child);
////    ...
//     DefaultMutableTreeNode parentNode = null;
//   DefaultTreeModel model;
////     = (DefaultTreeModel)locationJTree.getModel();
//    DefaultMutableTreeNode root;
//    root = new DefaultMutableTreeNode("Global");
// root.removeAllChildren();
//model = new DefaultTreeModel(root);
//locationJTree = new JTree(model);
//    model.insertNodeInto(childNode, parent,
//                             parent.getChildCount());
//
//    //Make sure the user can see the lovely new node.
//    if (shouldBeVisible) {
//        locationJTree.scrollPathToVisible(new TreePath(childNode.getPath()));
//    }
//    return childNode;
//}
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void locationJTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_locationJTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode node =(DefaultMutableTreeNode)locationJTree.getLastSelectedPathComponent();
        if(node!=null)
        lblSelectNodeJLabel.setText(node.toString());
    }//GEN-LAST:event_locationJTreeValueChanged

    private void refreshTreeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTreeJButtonActionPerformed
        // TODO add your handling code here:
        populateTree();
    }//GEN-LAST:event_refreshTreeJButtonActionPerformed

    private void creCountryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creCountryJButtonActionPerformed
        // TODO add your handling code here:
        
        CreateCountryJPanel createCountryJPanel = new CreateCountryJPanel(container,netWorkDirectory);
        CardLayout layout = (CardLayout)container.getLayout();
        container.add("CreateCountryJPanel",createCountryJPanel);
        layout.next(container);
    }//GEN-LAST:event_creCountryJButtonActionPerformed

    private void creCityJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creCityJButtonActionPerformed
        // TODO add your handling code here:
           CreateCityJPanel createCityJPanel = new CreateCityJPanel(container,netWorkDirectory);
        CardLayout layout = (CardLayout)container.getLayout();
        container.add("CreateCityJPanel",createCityJPanel);
        layout.next(container);
    }//GEN-LAST:event_creCityJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton creCityJButton;
    private javax.swing.JButton creCountryJButton;
    private javax.swing.JButton creStateJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblSelectNodeJLabel;
    private javax.swing.JTree locationJTree;
    private javax.swing.JButton refreshTreeJButton;
    private javax.swing.JScrollPane treePane;
    // End of variables declaration//GEN-END:variables
}
