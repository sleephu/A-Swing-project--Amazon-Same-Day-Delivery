/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.CustomerRole.Login;

import business.Business;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import system.Customer.Customer;
import system.Order.Order;
import system.Order.OrderItem;
import system.Organization.Organization;
import system.Shipping.Shipping;
import system.Transcation.Transcation;
import system.UserAccount.UserAccount;
import system.WorkQueue.WorkRequest;

/**
 *
 * @author Administrator
 */
public class ViewOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewOrdersJPanel
     */
    JPanel userProcessContainer;
    private Business business;
    Customer customer;
    UserAccount userAccount;

    public ViewOrdersJPanel(JPanel userProcessContainer, Business business, Customer customer, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.customer = customer;
        this.userAccount = userAccount;
//        invoiceJPanel.setVisible(false);
        orderItemJPanel.setVisible(false);
//        System.out.println("the order's customer is"+customer);
//         System.out.println("the customer is"+customer.getPerson().getName());
        popOITable();
        shippingJPanel.setVisible(false);
    }

    private void popOITable() {
        int rowCount = orderJTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderJTable.getModel()).removeRow(i);
        }
        for (Organization o : business.getDepartmentDirectory().getDepartmentList()) {
            if (o.getType().equals(Organization.OrganizationType.AmazonSalesDept)) {
                for (Order order : o.getMasterOrderList().getOrders()) {

                    if (order.getCustomer().equals(userAccount)) {
                        Object row[] = new Object[1];
                        row[0] = order;


                        ((DefaultTableModel) orderJTable.getModel()).addRow(row);

                    }
                }
            }
        }

    }

    private void popOITable(Order order) {
        int rowCount = orderItemJTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderItemJTable.getModel()).removeRow(i);
        }

        for (OrderItem oi : order.getOis()) {
            Object row[] = new Object[3];
            row[0] = oi;
            row[1] = oi.getProduct().getActualPrice();
            row[2] = oi.getQuantity();



            ((DefaultTableModel) orderItemJTable.getModel()).addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        viewOiJButton = new javax.swing.JButton();
        backjButton1 = new javax.swing.JButton();
        complainJButton = new javax.swing.JButton();
        approveJButton = new javax.swing.JButton();
        orderItemJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemJTable = new javax.swing.JTable();
        viewShippingJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        returnJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        shippingJPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        shippingJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 65, 490, 162));

        viewOiJButton.setText("View Order Item");
        viewOiJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOiJButtonActionPerformed(evt);
            }
        });
        add(viewOiJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        backjButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });
        add(backjButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 90, -1));

        complainJButton.setText("Complain");
        complainJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                complainJButtonActionPerformed(evt);
            }
        });
        add(complainJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 240, -1, -1));

        approveJButton.setText("Confirm");
        approveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveJButtonActionPerformed(evt);
            }
        });
        add(approveJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, -1, -1));

        orderItemJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemJTable);

        orderItemJPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 342, 114));

        viewShippingJButton.setText("View Shipping Process");
        viewShippingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewShippingJButtonActionPerformed(evt);
            }
        });
        orderItemJPanel.add(viewShippingJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, -1, -1));

        jLabel2.setText("View OrderItem");
        orderItemJPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        add(orderItemJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 280, 420, 180));

        returnJButton.setText("Return");
        returnJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnJButtonActionPerformed(evt);
            }
        });
        add(returnJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 240, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View Order History");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, -1));

        shippingJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        shippingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ShippingID", "OrderItem", "ShippingType", "ShippingEnterprise", "ShippingDate", "DeliveredDate", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(shippingJTable);

        shippingJPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 950, 100));

        jLabel3.setText("View Shipping Process");
        shippingJPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        add(shippingJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 980, 190));
    }// </editor-fold>//GEN-END:initComponents

    private void viewOiJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOiJButtonActionPerformed
        // TODO add your handling code here:
        // select an order and display its oi

        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Order order = (Order) orderJTable.getValueAt(selectedRow, 0);

        popOITable(order);
        orderItemJPanel.setVisible(true);
    }//GEN-LAST:event_viewOiJButtonActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backjButton1ActionPerformed

    private void complainJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complainJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Order order = (Order) orderJTable.getValueAt(selectedRow, 0);
//        order.setOrderStatus(Order.Cancel);
        ComplainJPanel complainJPanel = new ComplainJPanel(userProcessContainer, business, customer, userAccount, order);
        userProcessContainer.add("complainJPanel", complainJPanel);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);


    }//GEN-LAST:event_complainJButtonActionPerformed

    private void approveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Order order = (Order) orderJTable.getValueAt(selectedRow, 0);
        order.setOrderStatus(Order.Confirm);
        for (Organization o : business.getDepartmentDirectory().getDepartmentList()) {
            if (o.getType().equals(Organization.OrganizationType.AmazonAccountingDept)) {
                for (Transcation t : o.getTranscationList().getTranscationList()) {
                    if (t.getO().equals(order)) {
//                SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:MM:SS");
                        Date curDate = new Date(System.currentTimeMillis());
//                String str = formatter.format(curDate);
                        t.setCompleteDate(curDate);
                    }
                }
            }
        }


//        Invoice invoice = business.getInvoiceList().creInvoice();
//        invoice.setOrder(order);
//       
//        invoiceJPanel.setVisible(true);
//        
//        invoice.setInvoiceStatus(Invoice.PENDING);
//        invoiceIDJTextField.setText(String.valueOf(invoice.getId()));
//        orderIDJTextField.setText(String.valueOf(invoice.getOrder().getOrderNum()));
//        totalPriceJTextField.setText(String.valueOf(invoice.getOrder().getEachOrderPrice()));
//        spJTextField.setText(invoice.getOrder().getSalesPerson().getPerson().getName());
//        SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:MM:SS");
//        Date curDate = new Date(System.currentTimeMillis());
//        String str = formatter.format(curDate);
//        invoice.setDate(curDate);
//        dateJTextField.setText(String.valueOf(invoice.getDate()));
//        statusJTextField.setText(invoice.getInvoiceStatus());
//         if(invoice.getOrder().getOrderNum()==order.getOrderNum()){
//            JOptionPane.showMessageDialog(null, "Thank you! You have approved it!");
//            business.getInvoiceList().deleteInvoice(invoice);    
//        }



    }//GEN-LAST:event_approveJButtonActionPerformed

    private void returnJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Order order = (Order) orderJTable.getValueAt(selectedRow, 0);
//        order.setOrderStatus(Order.Cancel);
        ReturnProductJPanel returnProductJPanel = new ReturnProductJPanel(userProcessContainer, business, customer, userAccount, order);
        userProcessContainer.add("ReturnProductJPanel", returnProductJPanel);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);


    }//GEN-LAST:event_returnJButtonActionPerformed
    private void populateData(OrderItem oi, Shipping s) {
        DefaultTableModel model = (DefaultTableModel) shippingJTable.getModel();
        model.setNumRows(0);
//        for(NetWork n: netWorkDirectory.getNetWorkList()){
//        for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
//            if(e instanceof Business){

//            System.out.println("wr:"+wr);

        if (s.getShippingRequest().getCustomerShippingRequest().getSender().equals(userAccount) && oi.equals(s.getOi())) {
//           ua.setOrganizationType(Organization.OrganizationType.CustomerDept); 
//            if(wr.getId()==13){
//                 System.out.println(wr.getReceiverO()+"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
//             if(wr.getWorkRequestType().equals(WorkRequest.WorkRequestType.CustomerShippingRequest)){
            Object[] row = new Object[7];
            row[0] = s;    // don't need to get message

//            for(Order o: business.getMasterOrderList().getOrders()){
//                for(OrderItem oi:o.getOis()){
//                if (oi.equals(s.getOi())) {
//            row[1]=o.getOrderNum();
            row[1] = oi.getProduct().getName();
//                }
//                }

//                row[3] = s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getFirstName() + "" + s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getLastName();
//            }
//                row[4] = s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getLocation().getCountry() + "/" + s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getLocation().getState() + "/" + s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getLocation().getCity() + "/" + s.getShippingRequest().getCustomerShippingRequest().getSender().getPerson().getLocation().getStreet();
            row[2] = s.getShippingRequest().getTypeInfo();
            row[3] = s.getShippingRequest().getCustomerShippingRequest().getShippingEnterprise();
            row[4] = s.getShippingDate();
            row[5] = s.getDeliveredDate();
            row[6] = s.getStatus();

            model.addRow(row);
//        }
        }

    }
//           }
//        }

// }
//    }
    private void viewPendingShipping(OrderItem oi) {
        DefaultTableModel model = (DefaultTableModel) shippingJTable.getModel();
        model.setNumRows(0);
//        for(NetWork n: netWorkDirectory.getNetWorkList()){
//        for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
//            if(e instanceof Business){
//        for (WorkRequest wr : business.getWorkQueue().getWorkRequestList()) {
//            System.out.println("wr:"+wr);

//           ua.setOrganizationType(Organization.OrganizationType.CustomerDept); 
//            if(wr.getId()==13){
//                 System.out.println(wr.getReceiverO()+"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
//             if(wr.getWorkRequestType().equals(WorkRequest.WorkRequestType.CustomerShippingRequest)){
        for (Organization o : business.getDepartmentDirectory().getDepartmentList()) {
            if (o.getType().equals(Organization.OrganizationType.AmazonShippingDept)) {
                for (WorkRequest wr : o.getWorkQueue().getWorkRequestList()) {
                    if (wr.getWorkRequestType().equals(WorkRequest.WorkRequestType.CustomerShippingRequest)) {
                        Object[] row = new Object[7];
                        row[0] = wr;    // don't need to get message
//        for (Organization or : business.getDepartmentDirectory().getDepartmentList()) {
//            if (or.getType().equals(Organization.OrganizationType.AmazonSalesDept)) {
//                for (Order o : or.getMasterOrderList().getOrders()) {
//                    if (o.getCustomer().equals(wr.getSender())) {
                        row[1] = oi.getProduct().getName();
//                        for (OrderItem oi : o.getOis()) {
                        row[2] = wr.getTypeInfo();
//                        }
//                    }
                        if (wr.getShippingEnterprise() == null) {
                            row[3] = "Pending";
                        } else {
                            row[3] = wr.getShippingEnterprise();
                        }
                        row[4] = "";
//                    row[5] = wr.getTypeInfo();
                        row[5] = "";
                        row[6] = wr.getStatus();

                        model.addRow(row);
//                }
//            }
//        }
                    }

                }

            }
        }


    }
    private void viewShippingJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewShippingJButtonActionPerformed
        // TODO add your handling code here
        int selectedRow = orderItemJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }
        OrderItem oi = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);
        for (Organization o : business.getDepartmentDirectory().getDepartmentList()) {
            if (o.getType().equals(Organization.OrganizationType.AmazonShippingDept)) {
                if (o.getShippingList().getShippingList().isEmpty()) {
                    viewPendingShipping(oi);
                    shippingJPanel.setVisible(true);
                } else {
                    for (Shipping s : o.getShippingList().getShippingList()) {
                        if (s.getOi().equals(oi)) {
                            populateData(oi, s);
                            shippingJPanel.setVisible(true);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_viewShippingJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveJButton;
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton complainJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel orderItemJPanel;
    private javax.swing.JTable orderItemJTable;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton returnJButton;
    private javax.swing.JPanel shippingJPanel;
    private javax.swing.JTable shippingJTable;
    private javax.swing.JButton viewOiJButton;
    private javax.swing.JButton viewShippingJButton;
    // End of variables declaration//GEN-END:variables
}
